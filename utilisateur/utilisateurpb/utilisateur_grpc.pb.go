// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package utilisateurpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceUtilisateurClient is the client API for ServiceUtilisateur service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceUtilisateurClient interface {
	UpdateUtilisateur(ctx context.Context, in *UtilisateurRequest, opts ...grpc.CallOption) (*UtilisateurResponse, error)
	GetUtilisateur(ctx context.Context, in *UtilisateurRequest, opts ...grpc.CallOption) (*UtilisateurResponse, error)
	Auth(ctx context.Context, in *UtilisateurRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type serviceUtilisateurClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceUtilisateurClient(cc grpc.ClientConnInterface) ServiceUtilisateurClient {
	return &serviceUtilisateurClient{cc}
}

func (c *serviceUtilisateurClient) UpdateUtilisateur(ctx context.Context, in *UtilisateurRequest, opts ...grpc.CallOption) (*UtilisateurResponse, error) {
	out := new(UtilisateurResponse)
	err := c.cc.Invoke(ctx, "/utilisateur.ServiceUtilisateur/UpdateUtilisateur", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUtilisateurClient) GetUtilisateur(ctx context.Context, in *UtilisateurRequest, opts ...grpc.CallOption) (*UtilisateurResponse, error) {
	out := new(UtilisateurResponse)
	err := c.cc.Invoke(ctx, "/utilisateur.ServiceUtilisateur/GetUtilisateur", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUtilisateurClient) Auth(ctx context.Context, in *UtilisateurRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/utilisateur.ServiceUtilisateur/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceUtilisateurServer is the server API for ServiceUtilisateur service.
// All implementations must embed UnimplementedServiceUtilisateurServer
// for forward compatibility
type ServiceUtilisateurServer interface {
	UpdateUtilisateur(context.Context, *UtilisateurRequest) (*UtilisateurResponse, error)
	GetUtilisateur(context.Context, *UtilisateurRequest) (*UtilisateurResponse, error)
	Auth(context.Context, *UtilisateurRequest) (*AuthResponse, error)
	mustEmbedUnimplementedServiceUtilisateurServer()
}

// UnimplementedServiceUtilisateurServer must be embedded to have forward compatible implementations.
type UnimplementedServiceUtilisateurServer struct {
}

func (UnimplementedServiceUtilisateurServer) UpdateUtilisateur(context.Context, *UtilisateurRequest) (*UtilisateurResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUtilisateur not implemented")
}
func (UnimplementedServiceUtilisateurServer) GetUtilisateur(context.Context, *UtilisateurRequest) (*UtilisateurResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUtilisateur not implemented")
}
func (UnimplementedServiceUtilisateurServer) Auth(context.Context, *UtilisateurRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedServiceUtilisateurServer) mustEmbedUnimplementedServiceUtilisateurServer() {}

// UnsafeServiceUtilisateurServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceUtilisateurServer will
// result in compilation errors.
type UnsafeServiceUtilisateurServer interface {
	mustEmbedUnimplementedServiceUtilisateurServer()
}

func RegisterServiceUtilisateurServer(s grpc.ServiceRegistrar, srv ServiceUtilisateurServer) {
	s.RegisterService(&ServiceUtilisateur_ServiceDesc, srv)
}

func _ServiceUtilisateur_UpdateUtilisateur_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtilisateurRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUtilisateurServer).UpdateUtilisateur(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utilisateur.ServiceUtilisateur/UpdateUtilisateur",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUtilisateurServer).UpdateUtilisateur(ctx, req.(*UtilisateurRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUtilisateur_GetUtilisateur_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtilisateurRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUtilisateurServer).GetUtilisateur(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utilisateur.ServiceUtilisateur/GetUtilisateur",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUtilisateurServer).GetUtilisateur(ctx, req.(*UtilisateurRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUtilisateur_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtilisateurRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUtilisateurServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utilisateur.ServiceUtilisateur/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUtilisateurServer).Auth(ctx, req.(*UtilisateurRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceUtilisateur_ServiceDesc is the grpc.ServiceDesc for ServiceUtilisateur service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceUtilisateur_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "utilisateur.ServiceUtilisateur",
	HandlerType: (*ServiceUtilisateurServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUtilisateur",
			Handler:    _ServiceUtilisateur_UpdateUtilisateur_Handler,
		},
		{
			MethodName: "GetUtilisateur",
			Handler:    _ServiceUtilisateur_GetUtilisateur_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _ServiceUtilisateur_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/utilisateur.proto",
}
