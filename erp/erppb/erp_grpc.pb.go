// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package erppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceERPClient is the client API for ServiceERP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceERPClient interface {
	ValidERP(ctx context.Context, in *CommandeRequest, opts ...grpc.CallOption) (*CommandeResponse, error)
	ConfirmERP(ctx context.Context, in *CommandeRequest, opts ...grpc.CallOption) (*CommandeResponse, error)
}

type serviceERPClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceERPClient(cc grpc.ClientConnInterface) ServiceERPClient {
	return &serviceERPClient{cc}
}

func (c *serviceERPClient) ValidERP(ctx context.Context, in *CommandeRequest, opts ...grpc.CallOption) (*CommandeResponse, error) {
	out := new(CommandeResponse)
	err := c.cc.Invoke(ctx, "/erp.ServiceERP/ValidERP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceERPClient) ConfirmERP(ctx context.Context, in *CommandeRequest, opts ...grpc.CallOption) (*CommandeResponse, error) {
	out := new(CommandeResponse)
	err := c.cc.Invoke(ctx, "/erp.ServiceERP/ConfirmERP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceERPServer is the server API for ServiceERP service.
// All implementations must embed UnimplementedServiceERPServer
// for forward compatibility
type ServiceERPServer interface {
	ValidERP(context.Context, *CommandeRequest) (*CommandeResponse, error)
	ConfirmERP(context.Context, *CommandeRequest) (*CommandeResponse, error)
	mustEmbedUnimplementedServiceERPServer()
}

// UnimplementedServiceERPServer must be embedded to have forward compatible implementations.
type UnimplementedServiceERPServer struct {
}

func (UnimplementedServiceERPServer) ValidERP(context.Context, *CommandeRequest) (*CommandeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidERP not implemented")
}
func (UnimplementedServiceERPServer) ConfirmERP(context.Context, *CommandeRequest) (*CommandeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmERP not implemented")
}
func (UnimplementedServiceERPServer) mustEmbedUnimplementedServiceERPServer() {}

// UnsafeServiceERPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceERPServer will
// result in compilation errors.
type UnsafeServiceERPServer interface {
	mustEmbedUnimplementedServiceERPServer()
}

func RegisterServiceERPServer(s grpc.ServiceRegistrar, srv ServiceERPServer) {
	s.RegisterService(&ServiceERP_ServiceDesc, srv)
}

func _ServiceERP_ValidERP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceERPServer).ValidERP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erp.ServiceERP/ValidERP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceERPServer).ValidERP(ctx, req.(*CommandeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceERP_ConfirmERP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceERPServer).ConfirmERP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erp.ServiceERP/ConfirmERP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceERPServer).ConfirmERP(ctx, req.(*CommandeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceERP_ServiceDesc is the grpc.ServiceDesc for ServiceERP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceERP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "erp.ServiceERP",
	HandlerType: (*ServiceERPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidERP",
			Handler:    _ServiceERP_ValidERP_Handler,
		},
		{
			MethodName: "ConfirmERP",
			Handler:    _ServiceERP_ConfirmERP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/erp.proto",
}
