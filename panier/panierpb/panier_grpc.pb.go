// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package panierpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicePanierClient is the client API for ServicePanier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicePanierClient interface {
	UpdatePanier(ctx context.Context, in *PanierRequest, opts ...grpc.CallOption) (*PanierResponse, error)
	GetPanier(ctx context.Context, in *ByUtilisateurRequest, opts ...grpc.CallOption) (*PanierResponse, error)
}

type servicePanierClient struct {
	cc grpc.ClientConnInterface
}

func NewServicePanierClient(cc grpc.ClientConnInterface) ServicePanierClient {
	return &servicePanierClient{cc}
}

func (c *servicePanierClient) UpdatePanier(ctx context.Context, in *PanierRequest, opts ...grpc.CallOption) (*PanierResponse, error) {
	out := new(PanierResponse)
	err := c.cc.Invoke(ctx, "/panier.ServicePanier/UpdatePanier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicePanierClient) GetPanier(ctx context.Context, in *ByUtilisateurRequest, opts ...grpc.CallOption) (*PanierResponse, error) {
	out := new(PanierResponse)
	err := c.cc.Invoke(ctx, "/panier.ServicePanier/GetPanier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicePanierServer is the server API for ServicePanier service.
// All implementations must embed UnimplementedServicePanierServer
// for forward compatibility
type ServicePanierServer interface {
	UpdatePanier(context.Context, *PanierRequest) (*PanierResponse, error)
	GetPanier(context.Context, *ByUtilisateurRequest) (*PanierResponse, error)
	mustEmbedUnimplementedServicePanierServer()
}

// UnimplementedServicePanierServer must be embedded to have forward compatible implementations.
type UnimplementedServicePanierServer struct {
}

func (UnimplementedServicePanierServer) UpdatePanier(context.Context, *PanierRequest) (*PanierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePanier not implemented")
}
func (UnimplementedServicePanierServer) GetPanier(context.Context, *ByUtilisateurRequest) (*PanierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPanier not implemented")
}
func (UnimplementedServicePanierServer) mustEmbedUnimplementedServicePanierServer() {}

// UnsafeServicePanierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicePanierServer will
// result in compilation errors.
type UnsafeServicePanierServer interface {
	mustEmbedUnimplementedServicePanierServer()
}

func RegisterServicePanierServer(s grpc.ServiceRegistrar, srv ServicePanierServer) {
	s.RegisterService(&ServicePanier_ServiceDesc, srv)
}

func _ServicePanier_UpdatePanier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PanierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicePanierServer).UpdatePanier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panier.ServicePanier/UpdatePanier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicePanierServer).UpdatePanier(ctx, req.(*PanierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicePanier_GetPanier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByUtilisateurRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicePanierServer).GetPanier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panier.ServicePanier/GetPanier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicePanierServer).GetPanier(ctx, req.(*ByUtilisateurRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicePanier_ServiceDesc is the grpc.ServiceDesc for ServicePanier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicePanier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "panier.ServicePanier",
	HandlerType: (*ServicePanierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePanier",
			Handler:    _ServicePanier_UpdatePanier_Handler,
		},
		{
			MethodName: "GetPanier",
			Handler:    _ServicePanier_GetPanier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/panier.proto",
}
