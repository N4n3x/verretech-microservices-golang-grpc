// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package produitpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceProduitClient is the client API for ServiceProduit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProduitClient interface {
	AddProduit(ctx context.Context, in *ProduitRequest, opts ...grpc.CallOption) (*Produit, error)
	UpdateProduits(ctx context.Context, in *ProduitsRequest, opts ...grpc.CallOption) (*ProduitsResponse, error)
	GetAllProduits(ctx context.Context, in *GetAllProduitsRequest, opts ...grpc.CallOption) (*ProduitsResponse, error)
	GetProduitByRef(ctx context.Context, in *GetAllProduitsRequest, opts ...grpc.CallOption) (*Produit, error)
}

type serviceProduitClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProduitClient(cc grpc.ClientConnInterface) ServiceProduitClient {
	return &serviceProduitClient{cc}
}

func (c *serviceProduitClient) AddProduit(ctx context.Context, in *ProduitRequest, opts ...grpc.CallOption) (*Produit, error) {
	out := new(Produit)
	err := c.cc.Invoke(ctx, "/produit.ServiceProduit/AddProduit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProduitClient) UpdateProduits(ctx context.Context, in *ProduitsRequest, opts ...grpc.CallOption) (*ProduitsResponse, error) {
	out := new(ProduitsResponse)
	err := c.cc.Invoke(ctx, "/produit.ServiceProduit/UpdateProduits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProduitClient) GetAllProduits(ctx context.Context, in *GetAllProduitsRequest, opts ...grpc.CallOption) (*ProduitsResponse, error) {
	out := new(ProduitsResponse)
	err := c.cc.Invoke(ctx, "/produit.ServiceProduit/GetAllProduits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProduitClient) GetProduitByRef(ctx context.Context, in *GetAllProduitsRequest, opts ...grpc.CallOption) (*Produit, error) {
	out := new(Produit)
	err := c.cc.Invoke(ctx, "/produit.ServiceProduit/GetProduitByRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProduitServer is the server API for ServiceProduit service.
// All implementations must embed UnimplementedServiceProduitServer
// for forward compatibility
type ServiceProduitServer interface {
	AddProduit(context.Context, *ProduitRequest) (*Produit, error)
	UpdateProduits(context.Context, *ProduitsRequest) (*ProduitsResponse, error)
	GetAllProduits(context.Context, *GetAllProduitsRequest) (*ProduitsResponse, error)
	GetProduitByRef(context.Context, *GetAllProduitsRequest) (*Produit, error)
	mustEmbedUnimplementedServiceProduitServer()
}

// UnimplementedServiceProduitServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProduitServer struct {
}

func (UnimplementedServiceProduitServer) AddProduit(context.Context, *ProduitRequest) (*Produit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduit not implemented")
}
func (UnimplementedServiceProduitServer) UpdateProduits(context.Context, *ProduitsRequest) (*ProduitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduits not implemented")
}
func (UnimplementedServiceProduitServer) GetAllProduits(context.Context, *GetAllProduitsRequest) (*ProduitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProduits not implemented")
}
func (UnimplementedServiceProduitServer) GetProduitByRef(context.Context, *GetAllProduitsRequest) (*Produit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduitByRef not implemented")
}
func (UnimplementedServiceProduitServer) mustEmbedUnimplementedServiceProduitServer() {}

// UnsafeServiceProduitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProduitServer will
// result in compilation errors.
type UnsafeServiceProduitServer interface {
	mustEmbedUnimplementedServiceProduitServer()
}

func RegisterServiceProduitServer(s grpc.ServiceRegistrar, srv ServiceProduitServer) {
	s.RegisterService(&ServiceProduit_ServiceDesc, srv)
}

func _ServiceProduit_AddProduit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProduitServer).AddProduit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/produit.ServiceProduit/AddProduit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProduitServer).AddProduit(ctx, req.(*ProduitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProduit_UpdateProduits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProduitServer).UpdateProduits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/produit.ServiceProduit/UpdateProduits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProduitServer).UpdateProduits(ctx, req.(*ProduitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProduit_GetAllProduits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProduitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProduitServer).GetAllProduits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/produit.ServiceProduit/GetAllProduits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProduitServer).GetAllProduits(ctx, req.(*GetAllProduitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProduit_GetProduitByRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProduitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProduitServer).GetProduitByRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/produit.ServiceProduit/GetProduitByRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProduitServer).GetProduitByRef(ctx, req.(*GetAllProduitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProduit_ServiceDesc is the grpc.ServiceDesc for ServiceProduit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProduit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "produit.ServiceProduit",
	HandlerType: (*ServiceProduitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduit",
			Handler:    _ServiceProduit_AddProduit_Handler,
		},
		{
			MethodName: "UpdateProduits",
			Handler:    _ServiceProduit_UpdateProduits_Handler,
		},
		{
			MethodName: "GetAllProduits",
			Handler:    _ServiceProduit_GetAllProduits_Handler,
		},
		{
			MethodName: "GetProduitByRef",
			Handler:    _ServiceProduit_GetProduitByRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/produit.proto",
}
